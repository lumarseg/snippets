AWSTemplateFormatVersion: "2010-09-09"
Description: Kubernetes Cluster Template for Amazon EKS

Parameters:
  eksClusterName:
    Type: String
    Default: eksClusterDemo
    Description: EKS Cluster Demo
  eksIamRoleName:
    Type: String
    Default: eksClusterDemo-IAMRole
    Description: The name of the IAM role for the EKS service to assume.
  kubernetesVer:
    Type: String
    Default: "1.28"
    Description: Kubernetes version for the EKS cluster
  vpcBlock:
    Description: CIDR Block for the EKS cluster.
    Type: String
    Default: 10.0.0.0/20
  publicSubnet01Block:
    Description: Public Subnet 01
    Type: String
    Default: 10.0.1.0/24
  publicSubnet02Block:
    Description: Public Subnet 02
    Type: String
    Default: 10.0.2.0/24
  privateSubnet01Block:
    Description: Private Subnet 01
    Type: String
    Default: 10.0.3.0/24
  privateSubnet02Block:
    Description: Private Subnet 01
    Type: String
    Default: 10.0.4.0/24

Resources:
  EKSIAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: eks.amazonaws.com
            Action: sts:AssumeRole
      RoleName:
        Ref: eksIamRoleName
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 
        Ref: vpcBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-VPC'
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-IGW'
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn:
      - VPC
      - InternetGateway
    Properties:
      VpcId: 
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PubRT'
  PrivateRouteTable01:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PrivRT01'
  PrivateRouteTable02:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: 
        Ref: VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PrivRT02'

  PublicRoute:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: 
        Ref: PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
  PrivateRoute01:
    DependsOn:
    - VPCGatewayAttachment
    - NatGateway01
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: 
        Ref: PrivateRouteTable01
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NatGateway01
  PrivateRoute02:
    DependsOn:
    - VPCGatewayAttachment
    - NatGateway02
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable02
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NatGateway02

  PublicSubnet01:
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      VpcId: 
        Ref: VPC
      AvailabilityZone: us-east-1a
      CidrBlock:
        Ref: publicSubnet01Block
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PubSubNet01'
  PublicSubnet02:
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      VpcId: 
        Ref: VPC
      AvailabilityZone: us-east-1b
      CidrBlock:
        Ref: publicSubnet02Block
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PubSubNet02'
  PrivateSubnet01:
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone: us-east-1a
      CidrBlock:
        Ref: privateSubnet01Block
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PrivSubNet01'
  PrivateSubnet02:
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone: us-east-1a
      CidrBlock:
        Ref: privateSubnet02Block
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PrivSubNet02'

  NatGatewayEIP1:
    DependsOn:
    - VPCGatewayAttachment
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-EIP1'
  NatGatewayEIP2:
    DependsOn:
    - VPCGatewayAttachment
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-EIP2'

  NatGateway01:
    DependsOn:
    - NatGatewayEIP1
    - PublicSubnet01
    - VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - NatGatewayEIP1
          - AllocationId
      SubnetId:
        Ref: PublicSubnet01
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-NATGW01'
  NatGateway02:
    DependsOn:
      - NatGatewayEIP2
      - PublicSubnet02
      - VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - NatGatewayEIP2
          - AllocationId
      SubnetId:
        Ref: PublicSubnet02
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-NATGW02'

  PublicSubnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet01
      RouteTableId:
        Ref: PublicRouteTable
  PublicSubnet02RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet02
      RouteTableId:
        Ref: PublicRouteTable
  PrivateSubnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnet01
      RouteTableId:
        Ref: PrivateRouteTable01
  PrivateSubnet02RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnet02
      RouteTableId:
        Ref: PrivateRouteTable02

  ControlPlaneSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Cluster communication with worker nodes
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-SG'

  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Ref eksClusterName
      Version:
        Ref: kubernetesVer
      RoleArn:
        Fn::GetAtt:
          - EKSIAMRole
          - Arn
      ResourcesVpcConfig:
        SecurityGroupIds:
          - Ref: ControlPlaneSecurityGroup
        SubnetIds:
          - Ref: PublicSubnet01
          - Ref: PublicSubnet02
          - Ref: PrivateSubnet01
          - Ref: PrivateSubnet02
    DependsOn:
      - EKSIAMRole
      - PublicSubnet01
      - PublicSubnet02
      - PrivateSubnet01
      - PrivateSubnet02
      - ControlPlaneSecurityGroup

Outputs:
  EKSClusterEndpoint:
    Description: EKS Cluster Endpoint
    Value: 1
  EKSeksClusterName:
    Description: EKS Cluster Name
    Value: 1
